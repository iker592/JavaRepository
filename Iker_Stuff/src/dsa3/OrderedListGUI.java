package dsa3;

import dsa.*;import exceptions.*;import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.util.Iterator;import java.awt.FontMetrics; // to calculate string width in pixelspublic class OrderedListGUI {  Graphics2D g2;    static JFrame myFrame = new JFrame("Ordered List Demonstration");  static JPanel drawPane;     private JTextField inputTF;  private JTextArea contentsTA;  private JScrollPane contentsSP, outputSP, drawPaneSP;  private JTextArea outputTA = new JTextArea();  private JLabel sizeLbl = new JLabel("Number of elements in ordered list: 0");  static boolean showFunctions = false;    static Color textColor = new Color(210,210,255);  static Color nodeColor = new Color(1,110,218);  static Color bgColor = new Color(47,47,63);  static Color ptrColor = new Color(7,223,7);  static Color valueColor = new Color(255,255,255);  static Color objColor = Color.ORANGE;  static Color strColor = Color.MAGENTA;  static Color logColor = new Color(34,110,61);    private DoubleOrderedList<String> myList = new DoubleOrderedList<String>();    /**   * Creates GUI components    */  public Component createComponents()  {    sizeLbl.setFont(new Font("Verdana", Font.PLAIN, 12));    sizeLbl.setHorizontalAlignment(SwingConstants.CENTER);    JLabel inputLbl = new JLabel("Enter data to add: ");    inputLbl.setHorizontalAlignment(SwingConstants.CENTER);    inputLbl.setFont(new Font("Verdana", Font.PLAIN, 12));    JLabel contentsLbl = new JLabel("Output of myList.toString():");    contentsLbl.setHorizontalAlignment(SwingConstants.CENTER);    contentsLbl.setFont(new Font("Verdana", Font.PLAIN, 12));        /**     * This panel shows the graphical representation of the      * ordered list.      */    class DrawOrderedListPanel extends JPanel    {      public void paintComponent(Graphics g)      {        int curX = 80;        int curY = 25;        int boxHt = 30;                g2 = (Graphics2D) g;        super.paintComponent(g2); //paint background        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,                            RenderingHints.VALUE_ANTIALIAS_ON);        g2.setRenderingHint(RenderingHints.KEY_RENDERING,                            RenderingHints.VALUE_RENDER_QUALITY);        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,                            RenderingHints.VALUE_INTERPOLATION_BICUBIC);        g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,                            RenderingHints.VALUE_COLOR_RENDER_QUALITY);                g2.setStroke(new BasicStroke((float)1.75,BasicStroke.CAP_ROUND,                         BasicStroke.JOIN_MITER));                /** draws each box for the border */        Dimension drawDim = this.getSize();        g2.setBackground(bgColor);        g2.clearRect(0,0,drawDim.width,drawDim.height);                         g2.drawRect(0,0,drawDim.width-1,drawDim.height-1);                    g2.setFont(new Font("Verdana", Font.BOLD, 12));        FontMetrics fm = g2.getFontMetrics();        g2.setPaint(textColor);                                /** draws the myList node */        g2.drawString("myList",curX-7,curY);                    curY += 5;                /** the first box */        g2.setPaint(objColor);        g2.drawRect(curX,curY,boxHt,3*boxHt);                /** the separators */        g2.drawLine(curX,curY + boxHt,curX + boxHt,curY + boxHt);        g2.drawLine(curX,curY + 2*boxHt,curX + boxHt,curY + 2*boxHt);                /** ordered list count display */        int nowSize = myList.size();        String curSize = "" + nowSize;        g2.setPaint(valueColor);        int countPad = (boxHt - fm.stringWidth(curSize))/2;        g2.drawString(curSize,curX + countPad,curY + boxHt - 10);                /** draws labels on left side */        g2.setPaint(textColor);        g2.drawString("count",curX-45,curY+boxHt-10);        curY += boxHt;        g2.drawString("front",curX-45,curY+boxHt-10);        g2.drawString("rear",curX-45,curY+(2*boxHt)-10);                if (nowSize == 0)        {          /** draws null symbols */          g2.setPaint(ptrColor);          g2.drawLine(curX, curY, curX + boxHt, curY+boxHt);          g2.drawLine(curX, curY+boxHt, curX + boxHt, curY+2*boxHt);        }          else if (nowSize == 1)          {            /** draws the front arrow to the right */            g2.setPaint(ptrColor);            g2.drawLine(curX + (boxHt/2), curY + boxHt/2,                        curX + (4*boxHt), curY + boxHt/2);                        /** arrowpoints */            g2.drawLine(curX + (4*boxHt), curY + boxHt/2,                        curX + (4*boxHt)-4, curY + (boxHt/2)-4);            g2.drawLine(curX + (4*boxHt), curY + boxHt/2,                        curX + (4*boxHt)-4, curY + (boxHt/2)+4);                                       /** draws the rear arrow to the right */            g2.drawLine(curX + (boxHt/2), curY + (3*boxHt/2),                        curX + (9*boxHt/2), curY + (3*boxHt/2));                                       /** draws the small line up */            g2.drawLine(curX + (9*boxHt/2), curY + (3*boxHt/2),                        curX + (9*boxHt/2), curY + boxHt);                                       /** arrowpoints */            g2.drawLine(curX + (9*boxHt/2), curY + boxHt,                        curX + (9*boxHt/2)-4, curY + (boxHt)+4);            g2.drawLine(curX + (9*boxHt/2), curY + boxHt,                        curX + (9*boxHt/2)+4, curY + (boxHt)+4);                           /** draws label above nodes */            g2.setPaint(textColor);            g2.drawString("[ next | element ]", curX + 4*boxHt-15, curY-5);          }          else          {            /** draws the front arrow to the right */            g2.setPaint(ptrColor);            g2.drawLine(curX + (boxHt/2), curY + boxHt/2,                        curX + (4*boxHt), curY + boxHt/2);                                       /** arrowpoints */            g2.drawLine(curX + (4*boxHt), curY + boxHt/2,                        curX + (4*boxHt)-4, curY + (boxHt/2)-4);            g2.drawLine(curX + (4*boxHt), curY + boxHt/2,                        curX + (4*boxHt)-4, curY + (boxHt/2)+4);                           /** draws the small line down for the rear arrow */            g2.drawLine(curX + (boxHt/2), curY + (3*boxHt/2),                        curX + (boxHt/2), curY + (2*boxHt) +                         ((nowSize-2)*(3*boxHt/2)));            /** draws the line to the rear node */            g2.drawLine(curX + (boxHt/2), curY + (2*boxHt) +                       ((nowSize-2)*(3*boxHt/2)),curX + (4*boxHt), curY + (2*boxHt)                     + ((nowSize-2)*(3*boxHt/2)));                                                  /** arrowpoints */            g2.drawLine(curX + (4*boxHt), curY + (2*boxHt) +                       ((nowSize-2)*(3*boxHt/2)), curX + (4*boxHt)-4, curY + (2*boxHt)                       + ((nowSize-2)*(3*boxHt/2))-4);            g2.drawLine(curX + (4*boxHt), curY + (2*boxHt) + ((nowSize-2)*(3*boxHt/2)),                        curX + (4*boxHt)-4, curY + (2*boxHt) + ((nowSize-2)*(3*boxHt/2))+4);                        /** draws label above nodes */            g2.setPaint(textColor);            g2.drawString("[ next | element ]", curX + 4*boxHt-15, curY-5);          }                  curX += boxHt*4;        Iterator<String> it = myList.iterator();        for (int i=0; i < myList.size(); i++)        {          String top =  it.next();                    /** the first box */          g2.setPaint(nodeColor);          g2.drawRect(curX,curY,2*boxHt,boxHt);                         /** the separator */          g2.drawLine(curX + boxHt,curY,curX + boxHt,curY + boxHt);                       /** draws the arrow to the element */          g2.setPaint(ptrColor);          g2.drawLine(curX + ((3*boxHt)/2), curY + boxHt/2,                      curX + (4*boxHt), curY + boxHt/2);                    /** draws arrow points */          g2.drawLine(curX + (4*boxHt), curY + boxHt/2,                      curX + (4*boxHt)-4, curY + (boxHt/2)-4);          g2.drawLine(curX + (4*boxHt), curY + boxHt/2,                      curX + (4*boxHt)-4, curY + (boxHt/2)+4);                                   int elementLen = fm.stringWidth("\"" + top + "\"");          g2.setPaint(strColor);          /** draws the element box */          g2.drawRect(curX + 4*boxHt, curY, elementLen + 10, boxHt);                       g2.setPaint(valueColor);          /** element data */          g2.drawString("\"" + top + "\"",curX + (4*boxHt)+ 5,                        curY + boxHt - 10);                    if (i != myList.size()-1)          {            g2.setPaint(ptrColor);            /** down arrow */            g2.drawLine(curX + boxHt/2,curY + boxHt/2,curX + boxHt/2,                        curY + ((3*boxHt)/2));                        /** arrow points */            g2.drawLine(curX + boxHt/2,curY + ((3*boxHt)/2),                       (curX + boxHt/2)-4,curY + ((3*boxHt)/2)-4);            g2.drawLine(curX + boxHt/2,curY + ((3*boxHt)/2),                       (curX + boxHt/2)+4,curY + ((3*boxHt)/2)-4);          }                    else          {            /** draws null pointer */            g2.setPaint(ptrColor);            g2.drawLine(curX, curY + boxHt, curX + boxHt, curY);                        /** updates the scrollbars if drawing goes out of view */            drawPane.setPreferredSize(new Dimension(400, curY + 2*boxHt));            drawPane.revalidate();          }                    curY += (boxHt * 3)/2;        }      }    }        /**     * Represents an action listener for the add button.     */    class AddListener implements ActionListener    {      /**       * Adds the specified element to this list.       */      public void actionPerformed(ActionEvent e)      {        String curInput = inputTF.getText();        if (!curInput.equals(""))        {          myList.add(curInput);                    if (showFunctions)          {            outputTA.append("\nCalled: myList.add(\"" + curInput +                             "\");  // \"" + curInput + "\" has been added.");            /** forces a scroll down */            outputTA.setText(outputTA.getText());          }          else          {            outputTA.append("\nAdded \"" + curInput + "\".");            outputTA.setText(outputTA.getText());          }                    sizeLbl.setText("Number of elements in ordered list: " +                           myList.size());          inputTF.selectAll();                    inputTF.setText("");          contentsTA.setText(myList.toString());          drawPane.repaint();        }        else        {          outputTA.append("\nCannot add empty data!");          outputTA.setText(outputTA.getText());        }      }    }        inputTF = new JTextField(10);    inputTF.setFont(new Font("Verdana", Font.BOLD, 12));    inputTF.setHorizontalAlignment(SwingConstants.CENTER);    inputTF.addActionListener(new AddListener());        JButton addButton = new JButton("Add");    addButton.setMnemonic(KeyEvent.VK_A);    addButton.addActionListener(new AddListener());    addButton.setFont(new Font("Verdana", Font.PLAIN, 22));        JButton removeButton = new JButton("Remove");    removeButton.setFont(new Font("Verdana", Font.PLAIN, 22));    removeButton.setMnemonic(KeyEvent.VK_R);    removeButton.addActionListener(new ActionListener()    {      /**       * Removes the specified element from this list.       */      public void actionPerformed(ActionEvent e)      {        if (myList.size() > 0)        {          String curInput = inputTF.getText();          boolean valueExists = false;          Iterator<String> iterator = myList.iterator();                    while (iterator.hasNext())            if ((iterator.next()).equals(curInput))            {              myList.remove(curInput);              valueExists = true;            }                        if(valueExists)            {                 if (showFunctions)              {                outputTA.append("\nCalled: myList.remove(\""+ curInput +                              "\");  // All instances of \"" + curInput +                               "\" have been removed.");                outputTA.setText(outputTA.getText());              }              else              {                outputTA.append("\nRemoved all instances of \"" + curInput                                + "\" " + "from the ordered list.");                outputTA.setText(outputTA.getText());              }            }            else            {              outputTA.append("\nThe element \"" + curInput +                             "\" doesn't exist in the ordered list.");              outputTA.setText(outputTA.getText());            }                        inputTF.setText("");            sizeLbl.setText("Number of elements in ordered list: " + myList.size());            contentsTA.setText(myList.toString());                           drawPane.repaint();          }        else        {          outputTA.append("\nCannot remove an element from an empty list!");          outputTA.setText(outputTA.getText());        }      }    });          JButton removeFirstButton = new JButton("removeFirst");    removeFirstButton.setFont(new Font("Verdana", Font.PLAIN, 22));    removeFirstButton.setMnemonic(KeyEvent.VK_T);    removeFirstButton.addActionListener(new ActionListener()    {      /**       * Removes the first element from this list.       */      public void actionPerformed(ActionEvent e)      {        if (myList.size() > 0)        {          String curFirst =  myList.removeFirst();                    if (showFunctions)          {            outputTA.append("\nCalled: String curFirst =   " +                            "myList.removeFirst();  // Now, curFirst " +                            "is \"" + curFirst + "\".");            outputTA.setText(outputTA.getText());          }          else          {            outputTA.append("\nRemoved \"" + curFirst + "\" from the ordered list.");            outputTA.setText(outputTA.getText());          }          inputTF.setText("");          sizeLbl.setText("Number of elements in ordered list: " + myList.size());          contentsTA.setText(myList.toString());                         drawPane.repaint();        }        else        {          outputTA.append("\nCannot remove an element from an empty list!");          outputTA.setText(outputTA.getText());        }      }    });          JButton removeLastButton = new JButton("removeLast");    removeLastButton.setFont(new Font("Verdana", Font.PLAIN, 22));    removeLastButton.setMnemonic(KeyEvent.VK_L);    removeLastButton.addActionListener(new ActionListener()    {      /**       * Removes the last element from this list.       */      public void actionPerformed(ActionEvent e)      {        if (myList.size() > 0)        {          String curLast =  myList.removeLast();          if (showFunctions)          {            outputTA.append("\nCalled: String curLast =   myList.removeLast();  " +                            "// Now, curLast is \"" + curLast + "\".");            outputTA.setText(outputTA.getText());          }          else          {            outputTA.append("\nRemoved \"" + curLast + "\" from the ordered list.");            outputTA.setText(outputTA.getText());          }          sizeLbl.setText("Number of elements in ordered list: " + myList.size());          contentsTA.setText(myList.toString());                         drawPane.repaint();        }        else        {          outputTA.append("\nCannot remove an element from an empty list!");          outputTA.setText(outputTA.getText());        }      }    });        JButton firstButton = new JButton("First");    firstButton.setFont(new Font("Verdana", Font.PLAIN, 22));    firstButton.setMnemonic(KeyEvent.VK_F);    firstButton.addActionListener(new ActionListener()    {      /**       * Displays a reference to the first element in this list.       */      public void actionPerformed(ActionEvent e)      {        if (myList.size() > 0)        {          String curFirst =  myList.first();           if (showFunctions)          {            outputTA.append("\nCalled: String curFirst =   myList.first();  " +                            "// Now, curFirst is \"" + curFirst + "\"");            outputTA.setText(outputTA.getText());          }          else          {            outputTA.append("\nChecked the first element of the ordered list, " +                           "and it is \"" + curFirst + "\".");            outputTA.setText(outputTA.getText());          }        }        else        {          outputTA.append("\nCannot execute first() on an empty list!");          outputTA.setText(outputTA.getText());        }      }    });        JButton sizeButton = new JButton("Size");    sizeButton.setFont(new Font("Verdana", Font.PLAIN, 22));    sizeButton.setMnemonic(KeyEvent.VK_S);    sizeButton.addActionListener(new ActionListener()    {      /**       * Displays the number of elements in this list.       */      public void actionPerformed(ActionEvent e)      {        int curSize = myList.size();                   if (showFunctions)        {          outputTA.append("\nCalled: int curSize = myList.size();  " +                          "// Now, curSize is " + curSize + ".");          outputTA.setText(outputTA.getText());        }        else        {          outputTA.append("\nChecked the size of the ordered list, " +                          "and it has " + curSize + " elements.");          outputTA.setText(outputTA.getText());        }      }    });        JButton isEmptyButton = new JButton("isEmpty");    isEmptyButton.setFont(new Font("Verdana", Font.PLAIN, 22));    isEmptyButton.setMnemonic(KeyEvent.VK_M);    isEmptyButton.addActionListener(new ActionListener()    {      /**       * Displays whether or not this list is empty.       */      public void actionPerformed(ActionEvent e)      {        boolean empty = myList.isEmpty();        if (showFunctions)        {          String msg = "Called: boolean empty = myList.isEmpty();  // Now, empty == ";          if (empty)            msg += "true.";          else            msg += "false.";                    outputTA.append("\n" + msg);          outputTA.setText(outputTA.getText());        }        else        {          String msg = "Checked if the ordered list was empty,";          if (empty)            msg += " and it is empty.";          else            msg += " and it is NOT empty.";                    outputTA.append("\n" + msg);          outputTA.setText(outputTA.getText());        }      }    });        contentsTA = new JTextArea(12,20);    contentsTA.setFont(new Font("Verdana", Font.BOLD, 12));    contentsTA.setEditable(false);    contentsTA.setToolTipText("This area displays the current contents " +                              "of the ordered list as returned by the " +                              "toString() function.");    contentsSP = new JScrollPane(contentsTA);        outputTA = new JTextArea(5,20);    outputTA.setText("Enter data into the ordered list to see a demonstration.");    outputTA.setEditable(false);    outputTA.setFont(new Font("Verdana", Font.BOLD, 16));    outputTA.setForeground(logColor);    outputTA.setBackground(Color.WHITE);        outputSP = new JScrollPane(outputTA);    outputSP.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);        JPanel pane = new JPanel();    pane.setLayout(new BorderLayout());        JPanel leftPane = new JPanel();    leftPane.setLayout(new BorderLayout());        JPanel center = new JPanel();    center.setLayout(new GridLayout(3,1));    center.add(inputLbl);    center.add(inputTF);    center.add(sizeLbl);        leftPane.add("Center",center);        JPanel south = new JPanel();    south.setLayout(new GridLayout(4,2));    addButton.setToolTipText("Press this button to \"add\" an Object to the " +                             "ordered list.");    south.add(addButton);    removeButton.setToolTipText("Press this button to \"remove\" an Object from " +                                "the ordered list.");    south.add(removeButton);    removeFirstButton.setToolTipText("Press this button to remove the first " +                                     "Object from the ordered list.");    south.add(removeFirstButton);    removeLastButton.setToolTipText("Press this button to remove the last Object " +                                    "from the ordered list.");    south.add(removeLastButton);    firstButton.setToolTipText("Press this button to look at the \"first\" Object in " +                               "the list.  The first Object is returned and also " +                               "remains first in the ordered list.");    south.add(firstButton);    sizeButton.setToolTipText("Press this button to return the number of elements " +                              "currently contained within the ordered list.");    south.add(sizeButton);    isEmptyButton.setToolTipText("Press this button to check if the ordered list is empty.");    south.add(isEmptyButton);        leftPane.add("South", south);        JPanel north = new JPanel();    north.setLayout(new BorderLayout());    north.add("North", contentsLbl);    north.add("Center", contentsSP);        leftPane.add("North",north);        pane.add("West",leftPane);        drawPane = new DrawOrderedListPanel();    drawPaneSP = new JScrollPane(drawPane);        pane.add("Center",drawPaneSP);    pane.add("South", outputSP);        return pane;  }      /**   * Creates the top-level container and adds the contents   */  public void display()  {    try    {      UIManager.setLookAndFeel(        UIManager.getCrossPlatformLookAndFeelClassName());    }    catch (Exception e) { }        OrderedListGUI orderedListApp = new OrderedListGUI();    Component contents = orderedListApp.createComponents();    myFrame.getContentPane().add(contents, BorderLayout.CENTER);    myFrame.addWindowListener(new WindowAdapter()    {      /**       * Listens for window closing.       */      public void windowClosing(WindowEvent e)      {        System.exit(0);      }    });        /** sets up the menu bar at the top of the frame */    JMenuBar myMenuBar = new JMenuBar();    myFrame.setJMenuBar(myMenuBar);             JMenu optionsMenu = new JMenu("Options");    JMenu colorMenu = new JMenu("Color");        ButtonGroup colorGroup = new ButtonGroup();        JRadioButtonMenuItem selectColor = new JRadioButtonMenuItem      ("Show Color Display");    colorGroup.add(selectColor);    colorMenu.add(selectColor);    selectColor.setSelected(true);        class ColorListener implements ActionListener    {      /**       * Makes changes when a different color is selected.       */      public void actionPerformed(ActionEvent e)      {        if (e.getActionCommand().equals("Show Monochrome Display"))        {          /** changes to black and white */          textColor = new Color(0,0,0);          nodeColor = new Color(0,0,0);          bgColor = new Color(255,255,255);          ptrColor = new Color(0,0,0);          valueColor = new Color(0,0,0);          objColor = new Color(0,0,0);          strColor = new Color(0,0,0);          drawPane.repaint();        }        else        {          /** changes to color */          textColor = new Color(210,210,255);          nodeColor = new Color(1,110,218);          bgColor = new Color(47,47,63);          ptrColor = new Color(7,223,7);          valueColor = new Color(255,255,255);          objColor = Color.ORANGE;          strColor = Color.MAGENTA;          drawPane.repaint();        }     }    }        selectColor.addActionListener(new ColorListener());        JRadioButtonMenuItem selectMono = new JRadioButtonMenuItem        ("Show Monochrome Display");    colorGroup.add(selectMono);    colorMenu.add(selectMono);    selectMono.addActionListener(new ColorListener());        optionsMenu.add(colorMenu);    optionsMenu.addSeparator();        JCheckBoxMenuItem showCalls = new JCheckBoxMenuItem        ("Show ADT function calls?");    showCalls.setToolTipText("Check this box if you wish to " +        "see the function call that is executed for each button.");        showCalls.addItemListener( new ItemListener()    {      /**       * Enables/Disables display of function calls       */      public void itemStateChanged(ItemEvent e)      {        if (e.getStateChange() == ItemEvent.SELECTED)          showFunctions = true;        else          showFunctions= false;      }    });        optionsMenu.add(showCalls);    myMenuBar.add(optionsMenu);              JMenu helpMenu = new JMenu("Help");    JMenuItem aboutMenuItem = new JMenuItem("About OrderedListDemo");    aboutMenuItem.addActionListener(new ActionListener()    {      public void actionPerformed(ActionEvent e)      {        JOptionPane.showMessageDialog(myFrame,           "Ordered List Demonstration\n\nlast modified Jun.8.2005\n" +           "Karen McPherson",          "About OrderedListDemo", JOptionPane.PLAIN_MESSAGE);      }    });        helpMenu.add(aboutMenuItem);          myMenuBar.add(helpMenu);          myFrame.pack();    myFrame.setSize(800,650);          myFrame.setVisible(true);  }}
